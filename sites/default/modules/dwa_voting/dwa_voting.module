<?php

/**
 * @file
 * Provides voting logic for Favorite Website Awards.
 */
define('DWA_VOTING_AWARD_ID_SOD', 1);
define('DWA_VOTING_AWARD_ID_SOW', 2);
define('DWA_VOTING_AWARD_ID_SOM', 3);
define('DWA_VOTING_AWARD_NAME_SOD', t('Site of the Day'));
define('DWA_VOTING_AWARD_NAME_SOW', t('Site of the Week'));
define('DWA_VOTING_AWARD_NAME_SOM', t('Site of the Month'));
define('DWA_VOTING_FID_SOD', variable_get('dwa_voting_fid_sod', 5));
define('DWA_VOTING_FID_SOW', variable_get('dwa_voting_fid_sow', 6));
define('DWA_VOTING_FID_SOM', variable_get('dwa_voting_fid_som', 7));
define('DWA_VOTING_FLAG_NAME_SOD', variable_get('dwa_voting_flag_name_sod', 'sod'));
define('DWA_VOTING_FLAG_NAME_SOW', variable_get('dwa_voting_flag_name_sow', 'sow'));
define('DWA_VOTING_FLAG_NAME_SOM', variable_get('dwa_voting_flag_name_som', 'som'));

/**
 * Implements hook_block_info().
 */
function dwa_voting_block_info() {
  $blocks = array();

  $blocks['voting'] = array(
    'info' => t('Site Voting'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function dwa_voting_block_view($block_name = '') {
  switch ($block_name) {
    case 'voting':
      // Don't show this block on non-site nodes.
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        if ($node->type != 'site') {
          return false;
        }
      }
      else {
        return false;
      }

      // Determine node content.
      $block = array(
        'subject' => t('Vote for this Site'),
        'content' => dwa_voting_block_content($node),
      );

      return $block;
  }
}



/**
 * Implements hook_flag_default_flags().
 */
function dwa_voting_flag_default_flags() {
  $flags = array();

  // Exported flag: "Site of the Day".
  $flags['sod'] = array (
    'content_type' => 'node',
    'title' => 'Site of the Day',
    'global' => '0',
    'types' =>
    array (
      0 => 'site',
    ),
    'flag_short' => 'Vote "Site of the Day"',
    'flag_long' => 'Vote this site for the "Site of the Day" award',
    'flag_message' => 'Voted as "Site of the Day"',
    'unflag_short' => 'Remove your vote for "Site of the Day"',
    'unflag_long' => 'Remove your vote for the "Site of the Day" award',
    'unflag_message' => 'Un-Voted as "Site of the Day"',
    'unflag_denied_text' => 'You cannot change your vote for "Site of the Day"',
    'link_type' => 'normal',
    'roles' =>
    array (
      'flag' =>
      array (
        0 => '2',
      ),
      'unflag' =>
      array (
      ),
    ),
    'show_on_page' => 1,
    'show_on_teaser' => 0,
    'show_on_form' => 0,
    'access_author' => '',
    'i18n' => 0,
    'api_version' => 2,
  );

  // Exported flag: "Site of the Week".
  $flags['sow'] = array (
    'content_type' => 'node',
    'title' => 'Site of the Week',
    'global' => '0',
    'types' =>
    array (
      0 => 'site',
    ),
    'flag_short' => 'Vote "Site of the Week"',
    'flag_long' => 'Vote this site for the "Site of the Week" award',
    'flag_message' => 'Votes as "Site of the Week"',
    'unflag_short' => 'Remove your vote for "Site of the Week"',
    'unflag_long' => 'Remove your vote for the "Site of the Week" award',
    'unflag_message' => 'Un-Voted as "Site of the Month"',
    'unflag_denied_text' => 'You cannot change your vote for "Site of the Week"',
    'link_type' => 'toggle',
    'roles' =>
    array (
      'flag' =>
      array (
        0 => '2',
      ),
      'unflag' =>
      array (
      ),
    ),
    'show_on_page' => 1,
    'show_on_teaser' => 0,
    'show_on_form' => 0,
    'access_author' => '',
    'i18n' => 0,
    'api_version' => 2,
  );

  // Exported flag: "Site of the Month".
  $flags['som'] = array (
    'content_type' => 'node',
    'title' => 'Site of the Month',
    'global' => '0',
    'types' =>
    array (
      0 => 'site',
    ),
    'flag_short' => 'Vote "Site of the Month"',
    'flag_long' => 'Vote this site for the "Site of the Month" award',
    'flag_message' => 'Voted as "Site of the Month"',
    'unflag_short' => 'Remove your vote for "Site of the Month"',
    'unflag_long' => 'Remove your vote for the "Site of the Month" award',
    'unflag_message' => 'Un-Voted as "Site of the Month"',
    'unflag_denied_text' => 'You cannot change your vote for "Site of the Month"',
    'link_type' => 'toggle',
    'roles' =>
    array (
      'flag' =>
      array (
        0 => '2',
      ),
      'unflag' =>
      array (
      ),
    ),
    'show_on_page' => 1,
    'show_on_teaser' => 0,
    'show_on_form' => 0,
    'access_author' => '',
    'i18n' => 0,
    'api_version' => 2,
  );

  return $flags;
}



/**
 * Prepare content for site voting block.
 *
 * @params $node
 *   Site Node.
 *
 * @return
 *   Themed content.
 */
function dwa_voting_block_content($node) {
  // Generate a link to display a link for the sod award.
  $data_sod = dwa_voting_generate_link(DWA_VOTING_AWARD_ID_SOD, $node);
  $data = array();
  $data['title_sod'] = $data_sod['award_name'];
  $data['link'] = $data_sod['display'];
  return implode('<br />', $data);
}



function dwa_voting_init() {
  dwa_voting_process_sites(DWA_VOTING_AWARD_ID_SOD);
}



/**
 * Select winners for various categories.
 *
 * @param $award_id
 *   Award ID for which category results should be calculated.
 */
function dwa_voting_process_sites($award_id) {
  if (!isset($award_id)) {
    return;
  }
  
  // Determine if an update needs to happen for this award id
  // on this cron run.
  $process_sites = false;
  switch ($award_id) {
    // Site of the Day.
    // Calculate sod once per day.
    case 1:
      $var_name = 'dwa_voting_last_sod';
      $var_date = 'z';
      break;
  }
  $last_run_date = variable_get($var_name, '');
  $current_date = date($var_date);  
  if ($last_run_date != $current_date) {
    $process_sites = true;
  }
  

  // Calculate the sod, based on the eligible sites of the previous day.
  if ($process_sites == true) {
    $nid_winner = dwa_voting_determine_winner_site($award_id);
    dpm($nid_winner);
    
    // Mark this run as completed.
    // variable_set($var_name, $current_date);
  }
}



/**
 * Determine the winner of a batch of votes.
 *
 * @param $award_id
 *   Array ID.
 * 
 * @return
 *   Winner nid.
 */
function dwa_voting_determine_winner_site($award_id) {
  // Get eligible votes for this award id.
  $votes = dwa_voting_get_votes($award_id);

  // Determine the highest value in the array.
  $votes_max = max($votes);
  // Find all sites with this amount of votes.
  $winners = array_keys($votes, $votes_max);
  // Find out if there are multiple sites with the same highest amount.
  if (count($winners) > 1) {
    // Use a tie-breaker logic.
    $random_key = array_rand($winners);
    $nid_winner = $winners[$random_key];
  }
  else {
    // There is only one winner.
    $nid_winner = $winners[0];
  }
  return $nid_winner;
}



/**
 * Get all eligible sites for an award category from the database.
 *
 * @param @award_id
 *   Award Id.
 * @return
 *   Array of votes (key = nid, value = # of votes).
 */
function dwa_voting_get_votes($award_id) {
  if (!isset($award_id)) {
    return false;
  }

  switch ($award_id) {
    // Site of the Day.
    // Get all votes for sites that haven't already received any awards
    // (either sod, sow or som).    
    case 1:
      $query = db_select('flag_content', 'fc');
      $query->fields('fc');
      $subquery_sod = db_select('field_data_field_site_award_day', 'sod');
      $subquery_sod->addField('sod', 'entity_id');
      $subquery_sow = db_select('field_data_field_site_award_week', 'sow');
      $subquery_sow->addField('sow', 'entity_id');
      $subquery_som = db_select('field_data_field_site_award_month', 'som');
      $subquery_som->addField('som', 'entity_id');        
      $query->condition('fc.fid', _dwa_voting_map_award_id_to_flag_id($award_id));
      $query->condition('fc.content_id', $subquery_sod, 'NOT IN');
      $query->condition('fc.content_id', $subquery_sow, 'NOT IN');
      $query->condition('fc.content_id', $subquery_som, 'NOT IN');
      break;
  }  
  $result = $query->execute();
  
  // Process all results and find out the site with the most votes.
  $votes = array();    
  foreach ($result as $record) {
    // If there is no entry for this site, create a new
    // entry in the array with the nid as the key and 1 
    // vote as the value. Otherwise, count up by 1.
    if (isset($votes[$record->content_id])) {
      $votes[$record->content_id]++;
    }
    else {
      $votes[$record->content_id] = 1;
    }
  }  
  
  return $votes;
}



/**
 * Generate array of data related to voting links.
 */
function dwa_voting_generate_link($award_id, $node) {
  // Needs to be a valid award id and site node.
  $award_ids = array(DWA_VOTING_AWARD_ID_SOD, DWA_VOTING_AWARD_ID_SOW, DWA_VOTING_AWARD_ID_SOM);
  if (!in_array($award_id, $award_ids) || !is_object($node) || (is_object($node) && $node->type != 'site')) {
    return false;
  }

  // Determine if the current user has cast a vote for this site.
  $votes_node = dwa_voting_get_user_site_votes($node->nid, $GLOBALS['user']->uid);

  // Determine if the user can vote again.
  $votes_last = dwa_voting_get_last_user_votes($GLOBALS['user']->uid);

  // Aggregate data for vote link.
  $data = array();

  // Award Name.
  $data['award_name'] = t('Site of the Day');

  // Set the votability of this link to false by default.
  $data['voteable'] = false;

  // Store additional data.
  $data['votes_node'] = $votes_node;
  $data['votes_last'] = $votes_last;

  // Voting Link. Display a flag link for this award if:
  // - This site hasn't already been voted for this award
  // - The user has not already voted for this site
  // - The user can still vote for this award today
  switch ($award_id) {
    case 1: $field_name = 'field_site_award_day'; break;
    case 2: $field_name = 'field_site_award_week'; break;
    case 3: $field_name = 'field_site_award_month'; break;
  }
  if (isset($node->{$field_name}['und']['0']['value'])) {
    $replacements = array(
      '!award_name' => $data['award_name'],
      '!date' => format_date($node->{$field_name}['und']['0']['value'], 'custom', 'F j, Y'),
    );
    $data['display'] = t('This site has already been voted "!award_name" on !date.', $replacements);
  }
  else if (isset($votes_node[$award_id])) {
    $replacements = array(
      '!award_name' => $data['award_name'],
      '!date' => format_date($votes_node[1]['timestamp'], 'custom', 'F j, Y'),
    );
    $data['display'] = t('You voted this site for "Site of the Day" on !date.', $replacements);
  }
  else if ($votes_last[$award_id]['voteable'] === false) {
    $replacements = array(
      '!award_name' => $data['award_name'],
      '!date' => format_date($votes_last[1]['timestamp'], 'custom', 'F j, Y'),
    );
    $data['display'] = t('You already cast your "!award_name" today.', $replacements);
  }
  else {
    $data['voteable'] = true;
    $data['display'] = flag_create_link(_dwa_voting_map_award_id_to_flag_name($award_id), $node->nid);
  }

  return $data;
}


/**
 * Determine the last time a user has voted on all available types.
 *
 * @param $uid
 *   User ID, defaults to current user.
 *
 * @return
 *   Array of last votes.
 */
function dwa_voting_get_last_user_votes($uid) {
  if (!isset($uid)) {
    $uid = $GLOBALS['user']->uid;
  }

  $votes = array();
  $flag_ids = array(DWA_VOTING_FID_SOD, DWA_VOTING_FID_SOW, DWA_VOTING_FID_SOM);
  foreach ($flag_ids as $flag_id) {
    $query = db_select('flag_content', 'fc');
    $query->fields('fc');
    $query->condition('fc.uid', $uid);
    $query->condition('fc.fid', $flag_id);
    $query->range(0, 1);
    $query->orderBy('timestamp', 'DESC');
    $result = $query->execute();
    $record = $result->fetchObject();
    $award_id = _dwa_voting_map_flag_id_to_award_id($flag_id);
    if (is_object($record)) {
      $votes[$award_id] = array(
        'award_id' => $award_id,
        'timestamp' => $record->timestamp,
        'site_nid' => $record->content_id,
      );
    }
    else {
      $votes[$award_id] = array();
    }
  }

  // Every user has 1 vote per award type per day.
  // Add additional information for each vote.
  // 1. Boolean Indicator if user can vote for this award
  // 2. Duration until next vote is allowed.
  foreach ($votes as $id => $vote) {
    // If the user has never voted before or
    // the last vote for this award was yesterday,
    // the user can vote again.
    if (empty($vote) || (isset($vote['timestamp']) && ($vote['timestamp'] < strtotime("today")))) {
      $votes[$id]['wait'] = 0;
      $votes[$id]['voteable'] = true;
    }
    // If the user has voted for this award today,
    // calculate the duration until he can vote again.
    else {
      $votes[$id]['wait'] = strtotime("tomorrow") - $vote['timestamp'];
      $votes[$id]['voteable'] = false;
    }
  }

  return $votes;
}



/**
 * Determine the votes of the current user for this site.
 *
 * @param $nid
 *   Node ID.
 * @param $uid
 *   Uid, defaults to current user.
 *
 * @return
 *   Array of votes.
 */
function dwa_voting_get_user_site_votes($nid, $uid) {
  if (!isset($nid)) {
    return false;
  }

  if (!isset($uid)) {
    $uid = $GLOBALS['user']->uid;
  }

  $votes = array();
  $query = db_select('flag_content', 'fc');
  $query->fields('fc');
  $query->condition('fc.content_id', $nid);
  $query->condition('fc.uid', $uid);
  $query->condition('fc.fid', array(DWA_VOTING_FID_SOD, DWA_VOTING_FID_SOW, DWA_VOTING_FID_SOM), 'IN');
  $result = $query->execute();

  foreach ($result as $record) {
    $award_id = _dwa_voting_map_flag_id_to_award_id($record->fid);
    $votes[$award_id] = array(
      'award_id' => $award_id,
      'timestamp' => $record->timestamp,
    );
  }

  return $votes;
}



/**
 * Helper function to map flag ids to award ids.
 *
 * @param $flag_id
 *   Flag ID.
 *
 * @return
 *   Award ID.
 */
function _dwa_voting_map_flag_id_to_award_id($flag_id) {
  if (!isset($flag_id)) {
    return false;
  }

  $award_flag_map = array(
    DWA_VOTING_FID_SOD => DWA_VOTING_AWARD_ID_SOD,
    DWA_VOTING_FID_SOW => DWA_VOTING_AWARD_ID_SOW,
    DWA_VOTING_FID_SOM => DWA_VOTING_AWARD_ID_SOM,
  );

  return $award_flag_map[$flag_id];
}



/**
 * Helper function to map award ids to flag names.
 *
 * @param $award_id
 *   Award ID.
 *
 * @return
 *   Flag ID.
 */
function _dwa_voting_map_award_id_to_flag_name($award_id) {
  if (!isset($award_id)) {
    return false;
  }

  $map = array(
    DWA_VOTING_AWARD_ID_SOD => DWA_VOTING_FLAG_NAME_SOD,
    DWA_VOTING_AWARD_ID_SOW => DWA_VOTING_FLAG_NAME_SOW,
    DWA_VOTING_AWARD_ID_SOM => DWA_VOTING_FLAG_NAME_SOM,
  );

  return $map[$award_id];
}



/**
 * Helper function to map award ids to flag ids.
 *
 * @param $award_id
 *   Award ID.
 *
 * @return
 *   Flag ID.
 */
function _dwa_voting_map_award_id_to_flag_id($award_id) {
  if (!isset($award_id)) {
    return false;
  }

  $map = array(
    DWA_VOTING_AWARD_ID_SOD => DWA_VOTING_FID_SOD,
    DWA_VOTING_AWARD_ID_SOW => DWA_VOTING_FID_SOW,
    DWA_VOTING_AWARD_ID_SOM => DWA_VOTING_FID_SOM,
  );

  return $map[$award_id];
}



/**
 * Helper function: Return the name of an award.
 */
function _dwa_voting_award_name($award_id) {
  if (!isset($award_id)) {
    return false;
  }

  switch ($award_id) {
     case 1:  $award_name = DWA_VOTING_AWARD_NAME_SOD; break;
     case 2:  $award_name = DWA_VOTING_AWARD_NAME_SOW; break;
     case 3:  $award_name = DWA_VOTING_AWARD_NAME_SOM; break;
     default: $award_name = "Award";
  }

  return $award_name;
}
