<?php

/**
 * @file
 * Provides voting logic for Favorite Website Awards.
 */
define('DWA_VOTING_AWARD_ID_SOD', 1);
define('DWA_VOTING_AWARD_ID_SOW', 2);
define('DWA_VOTING_AWARD_ID_SOM', 3);
define('DWA_VOTING_FID_SOD', variable_get('dwa_voting_fid_sod', 5));
define('DWA_VOTING_FID_SOW', variable_get('dwa_voting_fid_sod', 6));
define('DWA_VOTING_FID_SOM', variable_get('dwa_voting_fid_sod', 7));

/**
 * Implements hook_block_info().
 */
function dwa_voting_block_info() {
  $blocks = array();
  
  $blocks['voting'] = array(
    'info' => t('Site Voting'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function dwa_voting_block_view($block_name = '') {
  switch ($block_name) {
    case 'voting':
      // Don't show this block on non-site nodes.
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        if ($node->type != 'site') {
          return false;        
        }
      }
      else {
        return false;
      }
      
      // Determine node content.
      $block = array(
        'subject' => t('Vote for this Site'),
        'content' => dwa_voting_block_content($node),
      );
      
      return $block;
  }
}



/**
 * Implements hook_flag_default_flags().
 */
function dwa_voting_flag_default_flags() {
  $flags = array();
  
  // Exported flag: "Site of the Day".
  $flags['sod'] = array (
    'content_type' => 'node',
    'title' => 'Site of the Day',
    'global' => '0',
    'types' => 
    array (
      0 => 'site',
    ),
    'flag_short' => 'Vote "Site of the Day"',
    'flag_long' => 'Vote this site for the "Site of the Day" award',
    'flag_message' => 'Voted as "Site of the Day"',
    'unflag_short' => 'Remove your vote for "Site of the Day"',
    'unflag_long' => 'Remove your vote for the "Site of the Day" award',
    'unflag_message' => 'Un-Voted as "Site of the Day"',
    'unflag_denied_text' => 'You cannot change your vote for "Site of the Day"',
    'link_type' => 'normal',
    'roles' => 
    array (
      'flag' => 
      array (
        0 => '2',
      ),
      'unflag' => 
      array (
      ),
    ),
    'show_on_page' => 1,
    'show_on_teaser' => 0,
    'show_on_form' => 0,
    'access_author' => '',
    'i18n' => 0,
    'api_version' => 2,
  );
  
  // Exported flag: "Site of the Week".
  $flags['sow'] = array (
    'content_type' => 'node',
    'title' => 'Site of the Week',
    'global' => '0',
    'types' => 
    array (
      0 => 'site',
    ),
    'flag_short' => 'Vote "Site of the Week"',
    'flag_long' => 'Vote this site for the "Site of the Week" award',
    'flag_message' => 'Votes as "Site of the Week"',
    'unflag_short' => 'Remove your vote for "Site of the Week"',
    'unflag_long' => 'Remove your vote for the "Site of the Week" award',
    'unflag_message' => 'Un-Voted as "Site of the Month"',
    'unflag_denied_text' => 'You cannot change your vote for "Site of the Week"',
    'link_type' => 'toggle',
    'roles' => 
    array (
      'flag' => 
      array (
        0 => '2',
      ),
      'unflag' => 
      array (
      ),
    ),
    'show_on_page' => 1,
    'show_on_teaser' => 0,
    'show_on_form' => 0,
    'access_author' => '',
    'i18n' => 0,
    'api_version' => 2,
  );
  
  // Exported flag: "Site of the Month".
  $flags['som'] = array (
    'content_type' => 'node',
    'title' => 'Site of the Month',
    'global' => '0',
    'types' => 
    array (
      0 => 'site',
    ),
    'flag_short' => 'Vote "Site of the Month"',
    'flag_long' => 'Vote this site for the "Site of the Month" award',
    'flag_message' => 'Voted as "Site of the Month"',
    'unflag_short' => 'Remove your vote for "Site of the Month"',
    'unflag_long' => 'Remove your vote for the "Site of the Month" award',
    'unflag_message' => 'Un-Voted as "Site of the Month"',
    'unflag_denied_text' => 'You cannot change your vote for "Site of the Month"',
    'link_type' => 'toggle',
    'roles' => 
    array (
      'flag' => 
      array (
        0 => '2',
      ),
      'unflag' => 
      array (
      ),
    ),
    'show_on_page' => 1,
    'show_on_teaser' => 0,
    'show_on_form' => 0,
    'access_author' => '',
    'i18n' => 0,
    'api_version' => 2,
  );
  
  return $flags;  
}



/**
 * Implements hook_flag().
 */
function dwa_voting_flag($action, $flag, $content_id, $account) {
  // Disallow voting for anonymous users.

  // When a site gets flagged, track that action in the database.
  if ($action == 'flag' && in_array('site', $flag->types) && ($flag->name == 'sod' || $flag->name == 'sow' || $flag->name == 'som')) {
    // Determine the type of vote.
    switch ($flag->name) {
      case 'sod': $type = DWA_VOTING_AWARD_ID_SOD; break;
      case 'sow': $type = DWA_VOTING_AWARD_ID_SOW; break;
      case 'som': $type = DWA_VOTING_AWARD_ID_SOM; break;
    }

    // Disallow voting if a user has already done so.
    // Unflag the site right after it has been flagged.
    // @see http://drupal.org/node/1008768#comment-3873374
    // This http://drupal.org/node/955724 didn't work.
    if (dwa_voting_voted($type, $account->uid)) {
      $flag->flag('unflag', $content_id, $account);
      switch ($flag->name) {
         case 'sod': $award_name = "Site of the Day"; break;
         case 'sow': $award_name = "Site of the Week"; break;
         case 'som': $award_name = "Site of the Month"; break;
      }
      $flag->flag_message = $flag->unflag_message = t('You can only cast 1 vote for "!award_name" per day.', array('!award_name' => $award_name));
      return;
    }
    
    $table = 'dwa_voting';
    $record = new stdClass();
    $record->uid = $account->uid;
    $record->nid = $content_id;
    $record->type = $type;
    $record->timestamp = time();
    drupal_write_record($table, &$record);
  }
}



/**
 * Check if a user has already cast a vote
 * for one of the awards.
 *
 * @param $type
 *   Type of vote.
 * @param $uid
 *   User Id (optional), defaults to logged-in user.
 */
function dwa_voting_voted($type = '', $uid = '') {
  // If no uid is passed, default to current user.
  if ($uid == '') {
    $uid = $GLOBALS['user']->uid;
  }
  
  // Make sure type is valid.
  $available_types = array(DWA_VOTING_AWARD_ID_SOD,DWA_VOTING_AWARD_ID_SOW,DWA_VOTING_AWARD_ID_SOM);
  if (!in_array($type, $available_types)) {
    return false;
  }

  // Determine if the current user has already cast his vote for the site of the day.
  $query = db_select('dwa_voting', 'dv');
  $query->fields('dv', array('vid'));
  $query->condition('dv.uid', $uid);
  $query->condition('dv.type', $type);
  $query->range(0, 1);
  $result = $query->execute();
  return $result->fetchField();
}



/**
 * Prepare content for site voting block.
 *
 * @params $node
 *   Site Node.
 *
 * @return
 *   Themed content.
 */
function dwa_voting_block_content($node) {
  dpm($node);
 
  // Determine if the current user has cast a vote for this site.
  $votes = dwa_voting_get_site_votes($node->nid);
  dpm($votes);
  
  return $node->title;
}



/**
 * Determine the votes of the current user for this site.
 *
 * @param $nid
 *   Node ID.
 * @return
 *   Array of votes.
 */
function dwa_voting_get_site_votes($nid) {
  if (!isset($nid)) {
    return false;
  }
  
  $votes = array();
  $query = db_select('flag_content', 'fc');
  $query->fields('fc');
  $query->condition('fc.content_id', $nid);
  $query->condition('fc.uid', $GLOBALS['user']->uid);  
  $query->condition('fc.fid', array(DWA_VOTING_FID_SOD, DWA_VOTING_FID_SOW, DWA_VOTING_FID_SOM), 'IN');
  $result = $query->execute();
  
  foreach ($result as $record) {
    $award_id = _dwa_voting_map_flag_award($record->fid);
    $votes[$award_id] = array(
      'award_id' => $award_id,
      'timestamp' => $record->timestamp,
    );
  }
  
  return $votes;  
}



/**
 * Helper function to map flag ids to award ids.
 *
 * @param $flag_id
 *   Flag ID.
 *
 * @return
 *   Award ID.
 */
function _dwa_voting_map_flag_award($flag_id) {
  if (!isset($flag_id)) {
    return false;
  }
  
  $award_flag_map = array(
    DWA_VOTING_FID_SOD => DWA_VOTING_AWARD_ID_SOD,
    DWA_VOTING_FID_SOW => DWA_VOTING_AWARD_ID_SOW,
    DWA_VOTING_FID_SOM => DWA_VOTING_AWARD_ID_SOM,            
  );

  return $award_flag_map[$flag_id];
}
